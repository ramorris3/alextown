app.controller("MainController",["$http","$scope","SaveService","MessageService",function($http,$scope,SaveService,MessageService){function preload(){editor.load.image("floor","assets/editor_floor.png"),editor.load.image("highlight","assets/highlight.png"),editor.load.image("cursor","assets/cursor.png"),editor.load.image("stageRight","assets/stage_right.png"),editor.load.image("stageLeft","assets/stage_left.png"),editor.load.bitmapFont("carrier_command","assets/carrier_command.png","assets/carrier_command.xml"),editor.load.spritesheet("chomper","assets/chomper_2.png",24,36)}function create(){for(editor.world.setBounds(0,0,editor.width*maxFrames,editor.height),editor.add.tileSprite(0,0,editor.width*maxFrames,editor.height,"floor"),i=0;i<editor.width*maxFrames;i+=tileSize){var list=[];for(j=0;j<editor.height;j+=tileSize)list.push("0");self.grid.push(list)}highlight=editor.add.sprite(0,0,"highlight"),stageLeft=editor.add.sprite(8,editor.world.centerY-16,"stageLeft"),stageRight=editor.add.sprite(editor.width-40,editor.world.centerY-16,"stageRight"),cursor=editor.add.sprite(editor.world.centerX,editor.world.centerY,"cursor"),stageLeft.fixedToCamera=!0,stageRight.fixedToCamera=!0,cursor.fixedToCamera=!0,editor.physics.enable(cursor,Phaser.Physics.ARCADE),editor.physics.enable(stageRight,Phaser.Physics.ARCADE),editor.physics.enable(stageLeft,Phaser.Physics.ARCADE),frameText=editor.add.bitmapText(10,10,"carrier_command","FRAME: "+viewFrame+"/"+maxFrames,20),frameText.fixedToCamera=!0,controlKey=editor.input.keyboard.addKey(Phaser.Keyboard.CONTROL),saveKey=editor.input.keyboard.addKey(Phaser.Keyboard.S)}function update(){editor.camera.x<viewFrame*editor.width?editor.camera.x+=20:editor.camera.x>viewFrame*editor.width&&(editor.camera.x-=20),cursor.cameraOffset.x=editor.input.mousePointer.x,cursor.cameraOffset.y=editor.input.mousePointer.y,updateHighlight(),cursor.clickAction=function(){placeCreature()},highlight.alive||editor.camera.x!=viewFrame*editor.width||highlight.revive(),editor.physics.arcade.overlap(cursor,stageRight,function(){highlight.kill(),cursor.clickAction=function(){scrollRight()}}),editor.physics.arcade.overlap(cursor,stageLeft,function(){highlight.kill(),cursor.clickAction=function(){scrollLeft()}}),editor.input.activePointer.isDown?prevMouseDown=!0:prevMouseDown&&(prevMouseDown=!1,cursor.clickAction()),saveKey.isDown?(!prevSaveDown&&controlKey.isDown&&save(),prevSaveDown=!0):prevSaveDown=!1}function getGridLocation(cartX,cartY){return{x:Math.floor(cartX/tileSize),y:Math.floor(cartY/tileSize)}}function updateHighlight(){hGridLoc=getGridLocation(highlight.x,highlight.y),cGridLoc=getGridLocation(cursor.x,cursor.y),hGridLoc.x==cGridLoc.x&&hGridLoc.y==cGridLoc.y||(highlight.x=cGridLoc.x*tileSize,highlight.y=cGridLoc.y*tileSize),highlight.x<editor.camera.x?highlight.x=editor.camera.x:highlight.x>editor.camera.x+editor.camera.width-tileSize&&(highlight.x=editor.camera.x+editor.camera.width-tileSize),highlight.y<0?highlight.y=0:highlight.y>editor.height-tileSize&&(highlight.y=editor.height-tileSize)}function placeCreature(){if(highlight.alive&&(gridLoc=getGridLocation(highlight.x,highlight.y),"0"===self.grid[gridLoc.x][gridLoc.y])){self.grid[gridLoc.x][gridLoc.y]="Z";var creature=editor.add.sprite(gridLoc.x*tileSize,gridLoc.y*tileSize,"chomper");creature.x=gridLoc.x*tileSize+highlight.width/2-creature.width/2,creature.y=gridLoc.y*tileSize+highlight.height/2-creature.height/2,creature.animations.add("chomp",[0,1,2,3,4,5],10,!0),creature.animations.play("chomp")}}function scrollRight(){viewFrame++,viewFrame>maxFrames&&(viewFrame=maxFrames),frameText.text="FRAME: "+viewFrame+"/"+maxFrames}function scrollLeft(){viewFrame--,0>viewFrame&&(viewFrame=0),frameText.text="FRAME: "+viewFrame+"/"+maxFrames}function save(){if(!filename){if(filename=prompt("What do you want to name the file? (Exclude file extension.)"),filename=filename.replace(/\W/g,""),filename+=".json",!filename)return void alert("File was not saved.");if(level=prompt("What level will this be (int)?"),level.isNaN()||null===level)return void alert("Must enter integer for level number.  File not saved.")}SaveService.saveLevel(filename,level,self.grid)}var self=this;$scope.getFlashMessage=MessageService.getFlashMessage,$scope.hideFlashMessage=MessageService.hideFlashMessage,$scope.enemies=[{name:"Chomper",description:"Can't deal damage, but they slow on contact."},{name:"Charger",description:"Temperamental enemies who will charge when in range."},{name:"Rook",description:"Sharpshooters who deal damage from a distance."}],$scope.currentEnemy=$scope.enemies[0];var highlight,cursor,stageRight,stageLeft,editor=new Phaser.Game(1e3,500,Phaser.CANVAS,"main-frame",{preload:preload,create:create,update:update});self.grid=[];var controlKey,saveKey,filename,level,frameText,tileSize=50,prevMouseDown=!1,prevSaveDown=!1,viewFrame=0,maxFrames=20}]);